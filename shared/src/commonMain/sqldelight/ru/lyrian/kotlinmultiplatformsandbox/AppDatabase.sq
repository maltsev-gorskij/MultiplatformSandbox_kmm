CREATE TABLE IF NOT EXISTS LaunchEntity (
    id              TEXT NOT NULL PRIMARY KEY,
    flightNumber    INTEGER NOT NULL,
    missionName     TEXT    NOT NULL,
    launchDateUTC   TEXT,
    launchYear      INTEGER AS Int,
    details         TEXT,
    launchSuccess   INTEGER AS Boolean DEFAULT NULL,
    articleUrl      TEXT,
    patchImageUrl   TEXT
);

insertLaunch:
INSERT INTO LaunchEntity(
    flightNumber,
    missionName,
    launchYear,
    details,
    launchSuccess,
    launchDateUTC,
    articleUrl,
    id,
    patchImageUrl
)
VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?);

getLaunchById:
SELECT *
FROM LaunchEntity
WHERE LaunchEntity.id == :launchId;

getLaunchesCount:
SELECT COUNT(*)
FROM LaunchEntity;

getLaunchesByPageSizeAndOffset:
SELECT *
FROM LaunchEntity
LIMIT :pageSize
OFFSET :queryOffset;

removeAllLaunches:
DELETE FROM LaunchEntity;

CREATE TABLE IF NOT EXISTS FlickrImageEntity (
    id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    imageUrl    TEXT NOT NULL,
    launchId    TEXT NOT NULL
);

insertFlickrImage:
INSERT INTO FlickrImageEntity(
    launchId,
    imageUrl
)
VALUES(?, ?);

getAllFlickrImagesByLaunchId:
SELECT imageUrl
FROM FlickrImageEntity
WHERE FlickrImageEntity.launchId == :launchId;

removeAllFlickImages:
DELETE FROM FlickrImageEntity;

CREATE TABLE IF NOT EXISTS FailureReasonEntity (
    id          INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    launchId    TEXT NOT NULL,
    reason      TEXT NOT NULL
);

insertFailureReason:
INSERT INTO FailureReasonEntity(
    launchId,
    reason
)
VALUES(?, ?);

getAllFailureReasonsById:
SELECT reason
FROM FailureReasonEntity
WHERE FailureReasonEntity.launchId == :launchId;

removeAllFailureReasons:
DELETE FROM FailureReasonEntity;
